// Code generated by protoc-gen-go.
// source: DataPayload.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ValueType int32

const (
	ValueType_DOUBLE ValueType = 0
	ValueType_FLOAT  ValueType = 1
	ValueType_INT64  ValueType = 2
	ValueType_INT32  ValueType = 3
	ValueType_BOOL   ValueType = 4
	ValueType_STRING ValueType = 5
	ValueType_BYTES  ValueType = 6
)

var ValueType_name = map[int32]string{
	0: "DOUBLE",
	1: "FLOAT",
	2: "INT64",
	3: "INT32",
	4: "BOOL",
	5: "STRING",
	6: "BYTES",
}
var ValueType_value = map[string]int32{
	"DOUBLE": 0,
	"FLOAT":  1,
	"INT64":  2,
	"INT32":  3,
	"BOOL":   4,
	"STRING": 5,
	"BYTES":  6,
}

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}
func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (x *ValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ValueType_value, data, "ValueType")
	if err != nil {
		return err
	}
	*x = ValueType(value)
	return nil
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type DataPayload struct {
	CreatedAt        *int64                    `protobuf:"varint,1,opt,name=createdAt" json:"createdAt,omitempty"`
	Attribute        []*Attribute              `protobuf:"bytes,5000,rep,name=attribute" json:"attribute,omitempty"`
	ReqId            *int64                    `protobuf:"varint,5001,opt,name=reqId" json:"reqId,omitempty"`
	ReqTy            *int32                    `protobuf:"varint,5002,opt,name=reqTy,def=0" json:"reqTy,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *DataPayload) Reset()                    { *m = DataPayload{} }
func (m *DataPayload) String() string            { return proto.CompactTextString(m) }
func (*DataPayload) ProtoMessage()               {}
func (*DataPayload) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

var extRange_DataPayload = []proto.ExtensionRange{
	{2, 4999},
}

func (*DataPayload) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_DataPayload
}
func (m *DataPayload) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_DataPayload_ReqTy int32 = 0

func (m *DataPayload) GetCreatedAt() int64 {
	if m != nil && m.CreatedAt != nil {
		return *m.CreatedAt
	}
	return 0
}

func (m *DataPayload) GetAttribute() []*Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *DataPayload) GetReqId() int64 {
	if m != nil && m.ReqId != nil {
		return *m.ReqId
	}
	return 0
}

func (m *DataPayload) GetReqTy() int32 {
	if m != nil && m.ReqTy != nil {
		return *m.ReqTy
	}
	return Default_DataPayload_ReqTy
}

type Attribute struct {
	DvcId            *int64                    `protobuf:"varint,1,opt,name=dvcId" json:"dvcId,omitempty"`
	AttrbCd          *int32                    `protobuf:"varint,2,opt,name=attrbCd" json:"attrbCd,omitempty"`
	AttrbVal         *AttributeValue           `protobuf:"bytes,3,opt,name=attrbVal" json:"attrbVal,omitempty"`
	AttrbStatCd      *int32                    `protobuf:"varint,101,opt,name=attrbStatCd" json:"attrbStatCd,omitempty"`
	AttrbStatMssage  *string                   `protobuf:"bytes,102,opt,name=attrbStatMssage" json:"attrbStatMssage,omitempty"`
	CurExecStep      *int32                    `protobuf:"varint,103,opt,name=curExecStep" json:"curExecStep,omitempty"`
	ExecAttribute    []*ExecAttribute          `protobuf:"bytes,104,rep,name=execAttribute" json:"execAttribute,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

var extRange_Attribute = []proto.ExtensionRange{
	{4, 100},
}

func (*Attribute) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Attribute
}
func (m *Attribute) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *Attribute) GetDvcId() int64 {
	if m != nil && m.DvcId != nil {
		return *m.DvcId
	}
	return 0
}

func (m *Attribute) GetAttrbCd() int32 {
	if m != nil && m.AttrbCd != nil {
		return *m.AttrbCd
	}
	return 0
}

func (m *Attribute) GetAttrbVal() *AttributeValue {
	if m != nil {
		return m.AttrbVal
	}
	return nil
}

func (m *Attribute) GetAttrbStatCd() int32 {
	if m != nil && m.AttrbStatCd != nil {
		return *m.AttrbStatCd
	}
	return 0
}

func (m *Attribute) GetAttrbStatMssage() string {
	if m != nil && m.AttrbStatMssage != nil {
		return *m.AttrbStatMssage
	}
	return ""
}

func (m *Attribute) GetCurExecStep() int32 {
	if m != nil && m.CurExecStep != nil {
		return *m.CurExecStep
	}
	return 0
}

func (m *Attribute) GetExecAttribute() []*ExecAttribute {
	if m != nil {
		return m.ExecAttribute
	}
	return nil
}

type ExecAttribute struct {
	StepDelay        *int32          `protobuf:"varint,1,opt,name=stepDelay" json:"stepDelay,omitempty"`
	StepFactor       *AttributeValue `protobuf:"bytes,2,opt,name=stepFactor" json:"stepFactor,omitempty"`
	StepSeq          *int32          `protobuf:"varint,3,opt,name=stepSeq" json:"stepSeq,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ExecAttribute) Reset()                    { *m = ExecAttribute{} }
func (m *ExecAttribute) String() string            { return proto.CompactTextString(m) }
func (*ExecAttribute) ProtoMessage()               {}
func (*ExecAttribute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ExecAttribute) GetStepDelay() int32 {
	if m != nil && m.StepDelay != nil {
		return *m.StepDelay
	}
	return 0
}

func (m *ExecAttribute) GetStepFactor() *AttributeValue {
	if m != nil {
		return m.StepFactor
	}
	return nil
}

func (m *ExecAttribute) GetStepSeq() int32 {
	if m != nil && m.StepSeq != nil {
		return *m.StepSeq
	}
	return 0
}

type AttributeValue struct {
	Type             *ValueType `protobuf:"varint,1,req,name=type,enum=ValueType" json:"type,omitempty"`
	DoubleValue      *float64   `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue       *float32   `protobuf:"fixed32,3,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	LongValue        *int64     `protobuf:"varint,4,opt,name=long_value,json=longValue" json:"long_value,omitempty"`
	IntValue         *int32     `protobuf:"varint,5,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	BoolValue        *bool      `protobuf:"varint,6,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue      *string    `protobuf:"bytes,7,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue       []byte     `protobuf:"bytes,8,opt,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *AttributeValue) Reset()                    { *m = AttributeValue{} }
func (m *AttributeValue) String() string            { return proto.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()               {}
func (*AttributeValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *AttributeValue) GetType() ValueType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ValueType_DOUBLE
}

func (m *AttributeValue) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *AttributeValue) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *AttributeValue) GetLongValue() int64 {
	if m != nil && m.LongValue != nil {
		return *m.LongValue
	}
	return 0
}

func (m *AttributeValue) GetIntValue() int32 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *AttributeValue) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *AttributeValue) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *AttributeValue) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func init() {
	proto.RegisterType((*DataPayload)(nil), "DataPayload")
	proto.RegisterType((*Attribute)(nil), "Attribute")
	proto.RegisterType((*ExecAttribute)(nil), "ExecAttribute")
	proto.RegisterType((*AttributeValue)(nil), "AttributeValue")
	proto.RegisterEnum("ValueType", ValueType_name, ValueType_value)
}

var fileDescriptor1 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x93, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0xb1, 0x63, 0xb7, 0xf6, 0xb8, 0x4d, 0xcd, 0x0a, 0xa4, 0x95, 0xf8, 0x0a, 0xb9, 0x24,
	0x04, 0x29, 0xa0, 0x50, 0x71, 0xe0, 0x96, 0x90, 0x14, 0x45, 0x0a, 0x0d, 0xda, 0x18, 0xa4, 0x72,
	0x41, 0xeb, 0x78, 0x13, 0x2a, 0x59, 0x75, 0x6a, 0xaf, 0xab, 0xfa, 0x1f, 0x14, 0x0e, 0x1c, 0xe0,
	0x0f, 0xb3, 0x1f, 0x8e, 0xe3, 0x20, 0x6e, 0x33, 0xcf, 0xbc, 0xfb, 0xce, 0x78, 0x76, 0x0d, 0xf7,
	0xc7, 0x94, 0xd3, 0x4f, 0xb4, 0x88, 0x13, 0x1a, 0xf5, 0x37, 0x69, 0xc2, 0x93, 0xf6, 0x2f, 0x03,
	0xbc, 0x1a, 0x45, 0x8f, 0xc1, 0x5d, 0xa6, 0x8c, 0x72, 0x16, 0x0d, 0x39, 0x36, 0x5a, 0x46, 0xb7,
	0x41, 0x76, 0x00, 0xbd, 0x00, 0x97, 0x72, 0x9e, 0x5e, 0x86, 0x39, 0x67, 0xf8, 0xae, 0xd3, 0x6a,
	0x74, 0xbd, 0x01, 0xf4, 0x87, 0x5b, 0x44, 0x76, 0x55, 0xf4, 0x10, 0xec, 0x94, 0x5d, 0x4f, 0x23,
	0xfc, 0xa3, 0xa3, 0x5c, 0x74, 0x86, 0xb0, 0xc2, 0x41, 0x81, 0x7f, 0x4a, 0x6c, 0xbf, 0x33, 0x5e,
	0x13, 0x0d, 0x7a, 0xb6, 0x63, 0xfa, 0x77, 0x9d, 0xf6, 0x6f, 0x13, 0xdc, 0xca, 0x10, 0x3d, 0x00,
	0x3b, 0xba, 0x59, 0x0a, 0x17, 0x3d, 0x8a, 0x4e, 0x84, 0xc9, 0xa1, 0x6c, 0x14, 0xbe, 0x8f, 0xb0,
	0x29, 0x5d, 0xc8, 0x36, 0x45, 0x2f, 0xc1, 0x51, 0xe1, 0x17, 0x1a, 0xe3, 0x86, 0x28, 0x79, 0x83,
	0x93, 0xdd, 0x78, 0x02, 0xe6, 0x8c, 0x54, 0x02, 0xd4, 0x02, 0x4f, 0xc5, 0x0b, 0x4e, 0xb9, 0xb0,
	0x62, 0xca, 0xaa, 0x8e, 0x50, 0x17, 0x4e, 0xaa, 0xf4, 0x63, 0x96, 0xd1, 0x35, 0xc3, 0x2b, 0xa1,
	0x72, 0xc9, 0xbf, 0x58, 0x7a, 0x2d, 0xf3, 0x74, 0x72, 0xcb, 0x96, 0x0b, 0xce, 0x36, 0x78, 0xad,
	0xbd, 0x6a, 0x08, 0x9d, 0xc2, 0x31, 0x13, 0x71, 0x35, 0x0d, 0xfe, 0xae, 0xd6, 0xd7, 0xec, 0x4f,
	0xea, 0x94, 0xec, 0x8b, 0x7a, 0x96, 0x63, 0xf9, 0xac, 0x7d, 0x0b, 0xc7, 0x7b, 0x2a, 0x79, 0x4d,
	0x99, 0x30, 0x1d, 0xb3, 0x98, 0x16, 0x6a, 0x37, 0x36, 0xd9, 0x01, 0xf4, 0x0a, 0x40, 0x26, 0x67,
	0x74, 0xc9, 0x93, 0x54, 0xad, 0xe8, 0x3f, 0x7b, 0xa8, 0x49, 0xe4, 0x42, 0x65, 0xb6, 0x60, 0xd7,
	0x6a, 0x6b, 0x62, 0xa1, 0x65, 0xda, 0xfe, 0x63, 0x42, 0x73, 0xff, 0x20, 0x7a, 0x0a, 0x16, 0x2f,
	0x36, 0x4c, 0xb4, 0x35, 0xbb, 0x4d, 0x71, 0xfd, 0x8a, 0x06, 0x82, 0x10, 0xc5, 0xd1, 0x73, 0x38,
	0x8a, 0x92, 0x3c, 0x8c, 0xd9, 0xb7, 0x1b, 0x59, 0x51, 0xfd, 0x0d, 0xe2, 0x69, 0xa6, 0x2d, 0x9e,
	0x81, 0xb7, 0x12, 0xcf, 0x8d, 0x97, 0x0a, 0xd9, 0xd3, 0x24, 0xa0, 0x90, 0x16, 0x3c, 0x01, 0x88,
	0x93, 0xab, 0x75, 0x59, 0xb7, 0xf4, 0x3b, 0x94, 0x44, 0x97, 0x1f, 0x81, 0x7b, 0x79, 0xb5, 0x3d,
	0x6d, 0xab, 0x89, 0x1d, 0x01, 0xaa, 0xb3, 0x61, 0x92, 0xc4, 0x65, 0xf5, 0x40, 0x54, 0x1d, 0xe2,
	0x4a, 0xa2, 0xcb, 0x62, 0xbc, 0x4c, 0x7c, 0x4f, 0x65, 0x7e, 0xa8, 0x2e, 0xd4, 0xd3, 0xac, 0x1a,
	0x2f, 0x2c, 0x38, 0xcb, 0x4a, 0x85, 0x23, 0x14, 0x47, 0x04, 0x14, 0x52, 0x82, 0xde, 0x05, 0xb8,
	0xd5, 0x57, 0x23, 0x80, 0x83, 0xf1, 0xfc, 0xf3, 0x68, 0x36, 0xf1, 0xef, 0x21, 0x17, 0xec, 0xb3,
	0xd9, 0x7c, 0x18, 0xf8, 0x86, 0x0c, 0xa7, 0xe7, 0xc1, 0xdb, 0x53, 0xdf, 0x2c, 0xc3, 0x37, 0x03,
	0xbf, 0x81, 0x1c, 0xb0, 0x46, 0xf3, 0xf9, 0xcc, 0xb7, 0xe4, 0xb1, 0x45, 0x40, 0xa6, 0xe7, 0x1f,
	0x7c, 0x5b, 0x0a, 0x46, 0x17, 0xc1, 0x64, 0xe1, 0x1f, 0x8c, 0xe0, 0xab, 0xa3, 0xfe, 0xcc, 0x30,
	0x5f, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x42, 0xbe, 0xda, 0x76, 0xb0, 0x03, 0x00, 0x00,
}
